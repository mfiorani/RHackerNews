% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HN.R
\name{getHN}
\alias{getHN}
\title{getHN}
\usage{
getHN(what = "top", n = 500)
}
\arguments{
\item{what}{string value to specify the desired endpoint. Admitted values are "top", "new", "best", "ask", "show", "job", "updates".
The default value is \code{"top"}.}

\item{n}{integer value to specifiy the maximum desired numbero of items to be retrieved.
\code{n} is automatically adjusted if it exceeds the maximum allowed size specified by the API for the specific endpoint.
The default value is \code{500}.}
}
\value{
It return a list of four objects:

1. a dataframe with tabular data (named "df")

2. a named list of retrieved kids objects (the ids of the item's comments, in ranked display order).

3. a named list of profiles (only populated by the "updates" API call)

4. a named list of poll-parts (related pollopts, in display order)


The tabular dataframe contains:

1. id:  The item's unique id.

2. deleted: Boolean if the item is deleted.

3. type:  The type of item. One of "job", "story", "comment", "poll", or "pollopt".

4. by:  The username of the item's author.

5. time:  Creation datetime of the item.

6. text:  The comment, story or poll text. UTF-8.

7. dead:  Boolean if the item is dead.

8. parent:  The comment's parent: either another comment or the relevant story.

9. poll:  The pollopt's associated poll.

10. url:   The URL of the story.

11. score:   The story's score, or the votes for a pollopt.

12. title:   The title of the story, poll or job.

13. descendants: In the case of stories or polls, the total comment count.

14. nkids: The count of kid's id

15. site: Base website URL of the story or job posting.
}
\description{
\code{getHN} is the main function to collect data from a specific endpoint.
}
\examples{
# Retrieve data from endpoints
top <- getHN(what = "top", n = 10)
job <- getHN(what = "job", n = 10)
best <- getHN(what = "best", n = 10)
ask <- getHN(what = "ask", n = 10)
show <- getHN(what = "show", n = 10)
updates <- getHN(what = "updates", n = 10)

# View data table from previous "topstories" API call
View(top$df)

# List "kids" elements from previous "beststories" API call
for(id in best$df$id){
   pid <- as.character(id)
   print(best$kids[pid])
}

# Example plots
library(dplyr)
library(ggplot2)
news_by_user <- top$df \%>\% group_by(by) \%>\% summarise(count = n()) \%>\% arrange(desc(count))
top$df \%>\% filter(by \%in\% news_by_user$by[1:10]) \%>\% ggplot(aes(by)) +
  geom_histogram(stat = "count") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title="Top news - Histogram for user")

news_by_site <- top$df \%>\% group_by(site) \%>\% filter(!is.na(site)) \%>\% summarise(count = n()) \%>\% arrange(desc(count))
top$df \%>\% filter(site \%in\% news_by_site$site[1:10]) \%>\% ggplot(aes(site)) +
  geom_histogram(stat = "count") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title="Top news - Histogram for website")

jobs_by_site <- job$df \%>\% group_by(site) \%>\% filter(!is.na(site)) \%>\% summarise(count = n()) \%>\% arrange(desc(count))
job$df \%>\% filter(site \%in\% jobs_by_site$site[1:10]) \%>\% ggplot(aes(site)) +
  geom_histogram(stat = "count") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title="Top jobs - Histogram for website")

}
